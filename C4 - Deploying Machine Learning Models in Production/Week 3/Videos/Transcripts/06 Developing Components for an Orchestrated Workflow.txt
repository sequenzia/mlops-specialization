One of the key parts of an MLOps
infrastructure is the training pipeline. Let's look now at developing
training pipelines using TFX, including ways to adapt your pipelines to
meet your needs with custom components. TFX is an open source framework that
you can use to create ML pipeline. TFX enables you to implement your model
training workflow in a variety of execution environments, including containerized
environments like Kubernetes. TFX pipelines, organize your work flow
into a series of components where each component performs a step
in your ML workflow. TFX standard components provide
proven functionality to help you get started building
in ML workflow easily. You can also include custom
components in your workflow, including creating components which run
in containers and can use any language or library that you can run in a container
such as performing data analysis using R. Custom components let you extend your
ML workflow by creating components that are tailored to meet your needs,
such as data augmentation, upsampling or downsampling anomaly
detection or interfacing with external systems such as help desks for
alerting and monitoring and much more. This is what a starter or Hello World,
TFX pipeline typically looks like. The things in orange here and
green are components and in this case these are standard components
which come with the TFX out of the box but they could just as easily be custom
components that you created. The components in orange
are a training pipeline and the ones in green are an inference
pipeline for doing batch inference. So by mixing standard components and
custom components, you can build an ML workflow that meets
your needs while taking advantage of the best practices built into
the TFX standard components. Now, let's take a look at how
TFX components are put together. They're essentially composed of
a component specification and executer class which are packaged
in a component class. The specification here defines
the components, input and output contract. This contract specifies the components,
input and output artifacts and the parameters that are used for
the component execution. A components executor class
provides the implementation for the work performed by the component. It's the main code for a component and
then finally we have the component class which combines the component
specification with the executor for use as a component in the TFX pipeline. Note that this is the implementation
style which is used by the TFX standard components and
full custom style components but there are also two other
styles of components for creating custom components,
which I'll discuss next. When a pipeline runs a TFX component,
the component is executed in three phases. First, the driver uses the component
specification to retrieve the required artifacts from the metadata
store and pass them into the component. Next, the executor performs
the components work. Finally, the publisher uses
the component specification and the results from the executor to store the
components, outputs in the metadata store. Most custom component implementations
do not require you to customize the driver with the publisher. Typically modification to the driver and
publisher should only be necessary if you want to change the interaction
between your pipelines components and the metadata store. If you only want to change the inputs,
outputs or parameters for your component, you only need to modify
the component specification. There are three types of custom
components, Python function based custom components, container based custom
components and fully custom components. Fully custom components which were
discussed in the previous slides, lets you build components by defining
the component specification, executer and component interface classes. This approach lets you reuse and extend
a standard component to meet your needs. A python function based component,
those are the easiest to build and they're easier than container based
components are fully custom components. They only require Python function for the
executor with a decorator and annotations. On the other hand, container based
components provide the flexibility to integrate code written in any
language into your pipeline, assuming that you can execute
that code in a docker container. To create a container based component,
you create a component definition that is very similar to a Docker file and cause
a wrapper function to instantiate it. Next we'll learn how you can make use
of each of the custom component types. The Python function-based
components style makes it easy for you to create TFX custom components
by saving you the effort of defining component specification class, executive
class and component interface class. In this style you write a function that is
decorated and annotated with type hints. The type hints describe
the InputArtifacts, OutputArtifacts and parameters of your component. Writing a custom component for
simple model validation in this style is very straightforward,
as is shown in this example. The component specification is
defined in the Python functions, arguments using type
annotations that describe if an argument is an InputArtifact,
OutputArtifact or a Parameter. The function body defines
the components executor. The component interfaces defined by add
the component decorator to your function. By decorating your function with
the component decorator and defining the function arguments we
type annotations, you could create a component without the complexity of
building a component specification and executor and a component interface. Next let's look at how to create
a container-based component. Container-based components are backed by
containerized command line arguments or programs rather. And in some ways are similar
to creating a Docker file. To create one, you need to specify a
Docker container image that includes your components dependencies. Then you call the create container
component function and pass the component definition, including the components,
inputs, outputs and parameters. There are other parts
of the configuration, like the container image name and
optionally the image tag. Finally, for the body of the component,
you have the command parameter which defines the container
entry point command line. As with docker files this isn't
executed within a shell unless you specify that in your command line. The command line can use
placeholder objects that are replaced at compilation time with
the input, output or parameters. The placeholder objects
can be imported from tfx.dsl.component.experimental.placehold-
ers. And in this example the component
code uses GacUtil to upload the data to Google Cloud storage so
the container image needs to have GacUtil installed as and
configured that's a dependency here. This approach is more complex than
building a python function-based component, since it requires packaging
your code as a container image. This approach is the most suitable for including non-python code
in your pipeline or for building Python components with complex
runtime environments or dependencies. Returning to fully custom
components this style lets you build components by directly defining
the component specification, executive class and component class. This approach also lets you reuse and
extend a standard component or other pre existing component
to meet your needs. For example, if an existing component,
which could be a custom component is defined with the same inputs and outputs
as the custom component that you're developing, you can simply override the
executor class of the existing component. This means that you can reuse
a component specification and implement a new executor that
derives from an existing component. In this way you can reuse functionality
built into existing components and implement only the functionality
that is required. The primary use of this component style
is to extend existing components. Otherwise, if you don't need
a containerized component, you should probably use the Python
function style instead. However, developing a good understanding
of this style of the fully custom component will help you to better
understand all TFX components. So let's take a closer look at how
to create a fully custom component. Developing a fully custom component
first requires you to define a component's back which
contains a set of input and output artifacts specifications for
the new component. Second, you must define any non-artifact
execution parameters that are needed for the new component. So there are three main parts of
the component specification the inputs, outputs and parameters. Inputs and outputs are wrapped in
channels essentially dictionaries of typed parameters for
the input and output artifacts. The parameters is a dictionary of
additional execution parameter items which are passed into the executor and
are not metadata artifacts. Next, well you need to create an executive
class basically this is a subclass of base_executor.BaseExecutor
with its do function overridden. In the do function,
the arguments input_dict, output_dict and exact properties are passed in and
those map to the inputs outputs and parameters that are defined in
the components back for exact properties. The values can be fetched directly
through a dictionary look up. Continuing with implementing the executor
for artifacts in the input_dict and output_ dickt, there are convenient
functions available in the artifact utilities class of TFX that can be used to
fetch and artifacts instance or it's URI. Now that the most complex part is complete
the next step is to assemble these pieces into a component class to
enable the component to be used in a pipeline there are several steps. First you need to make the component class
a subclass of base_component.BaseComponent or a different component if you're
extending an existing component. And next you assign class variables,
SPEC_CLASS and executor spec with a component spec and executor classes
respectively, that you just defined. The final step to completing
the custom component is to finish implementing the init,
which will initialize the component. Here you define the constructor
function by using the arguments to the function to construct an instance
of the component spec class and invoke the super function with that
value along with an optional name. When an instance of the components
created type checking logic in the base_component.BaseComponent
class will be invoked to ensure that the arguments which were passed in
are compatible with the types to find in the component spec class. The last step is to plug the new
custom component into a TFX pipeline. Besides adding an instance
of the new component, you need to wire the upstream and
downstream components to it. You can generally do this by
referencing the outputs of the upstream components in the new component and referencing the outputs of the new
component in the downstream components. Also another thing to keep in mind
is that you need to add the new component instance to the components
list when constructing the pipeline.